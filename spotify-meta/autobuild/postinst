#!/usr/bin/bash
# This is a metapackage, and the only thing usuable is postinst script 
# to download the actual package and install it.

# Choose what program should be called
UNPACK_EXEC="dpkg-deb"
PACKFILE="spotify-client_1.1.42.622.gbd112320-37_amd64.deb"
DOWNLOAD="http://repository.spotify.com/pool/non-free/s/spotify-client/$PACKFILE"
TMPDIR="/var/tmp/spotify"

if ! [ -e "/usr/bin/dpkg-deb" ]; then
        UNPACK_EXEC="ar"
fi

mkdir -p $TMPDIR

errquit() {
        echo "Run \`sudo apt -f install' to rerun installation process."
        rm -rf $TMPDIR
        exit 1
}


# Download the package
for i in 1 2 3; do
        echo "Downloading Spotify Debian package... [$i/3]"
        pushd $TMPDIR
        # $VER can not be used here, since this is dpkg-related, so the only choice is to hardcode
        wget "$DOWNLOAD"
        if [ "$?" == "0" ]; then
                echo "Download complete."
                popd
                break
        fi
done

if [ "$?" != "0" ]; then
        echo "Download failed. Please run \`sudo apt -f install'."
        # return 1 to the parent process to fail this installation.
        errquit
fi

echo "Killing running Spotify processes..."
pkill "/usr/lib/spotify" || true

echo "Removing existing Spotify files..."
rm -f /usr/bin/spotify
rm -rf /usr/lib/spotify
rm -rf /usr/share/doc/spotify

# Unpack the package
if [ "$UNPACK_EXEC" == "dpkg-deb" ]; then
        echo "Unpacking pacakge..."
        pushd $TMPDIR
        dpkg-deb -X "./$PACKFILE" "$TMPDIR/"
        if [ "$?" != "0" ]; then
                echo "Failed to unpack, make sure you have enough disk space."
                errquit
        fi
else
        echo "Unpacking package..."
        pushd $TMPDIR
        ar xv $PACKFILE || \
                echo "Failed to unpack, make sure you have enough disk space."  && \
                errquit
echo "Configuring spotify..."
        tar -Jxv $TMPDIR/data.tar.xz
        if [ "$?" != "0" ]; then
                echo "Failed to unpack, make sure you have enough disk space."
                errquit
        fi
fi

# Move the file to the disired destination
echo "Moving Spotify folder..."
mkdir -p /usr/share/doc/spotify/
mv $TMPDIR/usr/share/spotify /usr/lib/
cp -R $TMPDIR/usr/share/doc/spotify-client /usr/share/doc/spotify
ln -sf /usr/lib/spotify/spotify /usr/bin/spotify
echo "Moved to /usr/lib/spotify."

cat > $TMPDIR/configure.sh <<'EOF'
#
# Copyright (c) 2015 Spotify AB
#
# This script registers menus and icons. It should be run from the top-level
# folder of the uncompressed Spotify distribution. Since this script is also run
# as a post-install task for the debian package, it will attempt to run relative
# to /usr/share/spotify if this path is available.

echo "Configuring spotify..."
spotifyPath=$PWD
if [ -e /usr/lib/spotify ]; then
  spotifyPath=/usr/lib/spotify
fi

# Add icons to the system icon folders
XDG_ICON_RESOURCE="$(command -v xdg-icon-resource 2> /dev/null)"
if [ ! -x "$XDG_ICON_RESOURCE" ]; then
  echo "Error: Could not find xdg-icon-resource" >&2
  exit 1
fi

for icon in "$spotifyPath"/icons/spotify-linux-*.png; do
  [ -e "$icon" ] || break
  size="${icon##*/spotify-linux-}"
  "$XDG_ICON_RESOURCE" install --noupdate --size "${size%.png}" "$icon" "spotify"
done
"$XDG_ICON_RESOURCE" forceupdate

# Add an entry to the system menu
XDG_DESKTOP_MENU="$(command -v xdg-desktop-menu 2> /dev/null)"
UPDATE_MENUS="$(command -v update-menus 2> /dev/null)"
if [ ! -x "$XDG_DESKTOP_MENU" ]; then
  echo "Error: Could not find xdg-desktop-menu" >&2
  exit 1
fi

# It seems the desktop file has to match the MPris name. We don't want to
# change that, so we use --novendor here instead.
"$XDG_DESKTOP_MENU" install --novendor "$spotifyPath/spotify.desktop"
if [ -x "$UPDATE_MENUS" ]; then
  "$UPDATE_MENUS"
fi
EOF

bash $TMPDIR/configure.sh
echo "Installation complete!"
rm -rf /var/tmp/spotify
